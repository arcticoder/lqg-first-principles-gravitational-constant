{"task":"Validate GhostScalarStressTensor kinetic_energy_density expression","priority":"High","source_file":"src/stress_energy_tensor.py","source_file_lines":"30:50","source_snippet":"def kinetic_energy_density","python_snippet":"import sympy as sp; from stress_energy_tensor import GhostScalarStressTensor, StressEnergyConfig; gst = GhostScalarStressTensor(StressEnergyConfig()); expr = gst.kinetic_energy_density(); assert expr == sp.Rational(1,2)*gst.phi_t**2"}
{"task":"Verify GhostScalarStressTensor potential_energy_density for quartic potential","priority":"Medium","source_file":"src/stress_energy_tensor.py","source_file_lines":"60:80","source_snippet":"def potential_energy_density","python_snippet":"from stress_energy_tensor import GhostScalarStressTensor, StressEnergyConfig; gst = GhostScalarStressTensor(StressEnergyConfig()); V = gst.potential_energy_density(V_type='quartic'); assert 'phi**4' in str(V)"}
{"task":"Test PolymerStressTensorCorrections polymer_momentum_correction limit behavior","priority":"High","source_file":"src/stress_energy_tensor.py","source_file_lines":"100:120","source_snippet":"def polymer_momentum_correction","python_snippet":"from stress_energy_tensor import PolymerStressTensorCorrections, StressEnergyConfig; cfg = StressEnergyConfig(polymer_scale=0.01); pst = PolymerStressTensorCorrections(cfg); p = sp.symbols('p'); corr = pst.polymer_momentum_correction(p); assert corr.has(sp.sin)"}
